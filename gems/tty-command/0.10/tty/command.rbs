module TTY
  class Command
    def self.record_separator: () -> (Regexp | String)

    def self.record_separator=: (Regexp | String sep) -> (Regexp | String)

    def self.windows?: () -> bool

    def initialize: (?binmode: bool, ?color: bool, ?dry_run: bool, ?output: IO, ?printer: Symbol, ?pty: bool, ?timeout: __todo__, ?uuid: bool, ?verbose: bool) -> void

    def dry_run?: () -> bool

    def ruby: (*Hash[String, String] | String | Symbol args, **__todo__ command_options) ? { (IO out, IO err) -> void } -> Result

    def run: (*Hash[String, String] | String | Symbol args, **__todo__ command_options) ? { (IO out, IO err) -> void } -> Result

    def run!: (*Hash[String, String] | String | Symbol args, **__todo__ command_options) ? { (IO out, IO err) -> void } -> Result

    def test: (*Hash[String, String] | String | Symbol args, **__todo__ command_options) -> Result

    def wait: (*Hash[String, String] | Regexp | String | Symbol args, **__todo__ command_options) -> Result

    private

    def command: (*Hash[String, String] | String | Symbol args) -> Cmd

    def execute_command: (Cmd cmd) ?{ (IO | String out, IO | String err) -> void } -> Result
  end
end
